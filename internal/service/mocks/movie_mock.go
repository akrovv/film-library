// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/akrovv/filmlibrary/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieService is a mock of MovieService interface.
type MockMovieService struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceMockRecorder
}

// MockMovieServiceMockRecorder is the mock recorder for MockMovieService.
type MockMovieServiceMockRecorder struct {
	mock *MockMovieService
}

// NewMockMovieService creates a new mock instance.
func NewMockMovieService(ctrl *gomock.Controller) *MockMovieService {
	mock := &MockMovieService{ctrl: ctrl}
	mock.recorder = &MockMovieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieService) EXPECT() *MockMovieServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMovieService) Create(dto *domain.CreateMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMovieServiceMockRecorder) Create(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMovieService)(nil).Create), dto)
}

// Delete mocks base method.
func (m *MockMovieService) Delete(dto *domain.DeleteMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMovieServiceMockRecorder) Delete(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMovieService)(nil).Delete), dto)
}

// Get mocks base method.
func (m *MockMovieService) Get(dto *domain.GetMovie) (*domain.MovieWithoudID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", dto)
	ret0, _ := ret[0].(*domain.MovieWithoudID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMovieServiceMockRecorder) Get(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMovieService)(nil).Get), dto)
}

// GetOrderedList mocks base method.
func (m *MockMovieService) GetOrderedList(dto *domain.GetOrderedMovie) ([]domain.MovieWithoudID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderedList", dto)
	ret0, _ := ret[0].([]domain.MovieWithoudID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderedList indicates an expected call of GetOrderedList.
func (mr *MockMovieServiceMockRecorder) GetOrderedList(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderedList", reflect.TypeOf((*MockMovieService)(nil).GetOrderedList), dto)
}

// Update mocks base method.
func (m *MockMovieService) Update(dto *domain.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMovieServiceMockRecorder) Update(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieService)(nil).Update), dto)
}
